@external tokens readDelimitedString from "./helpers.js" { DelimitedString }
@external tokens readUndelimitedString from "./helpers.js" { UndelimitedString }
@external tokens readMacroArguments from "./helpers.js" { MacroArgument }
@external specialize { Symbol } specializeSymbol from "./helpers.js" { MacroSymbol }
@precedence { top, bot, macro }
@top Program { Instruction* EOF }

Instruction {
    blank*
    (Label blank*)*
    (Statement ~end !bot blank*)?
    Comment?
    StatementEnd
}

Label { Symbol "," }

Statement {
    Origin { "*" Expression } |
    Assign { Symbol "=" blank* Expression } |
    ExprStatement { Expression } |
    Invocation { MacroSymbol MacroArgument* } |
    PseudoStatement
}

StatementEnd { Separator | EOL }

Separator { ";" }
Expression { ExprGroup | BasicExpression }
BasicExpression { BinaryOp | ParenExpr | Element }
ParenExpr { ("(" blank* Expression ~end !top blank* ")"?) | ("[" blank* Expression ~end !top blank* "]"?)}
BinaryOp { Element (BinaryOperator Element)+ }
ExprGroup { BasicExpression (~end blank+ BasicExpression)+ }

Element { UnaryOp? (Integer | Symbol | ASCII | CLC) }

PseudoStatement {
    Page { @specialize<Symbol, "PAGE"> ~end (blank+ Param)? } |
    Field { @specialize<Symbol, "FIELD"> ~end (blank+ Param)? } |
    Reloc { @specialize<Symbol, "RELOC"> ~end (blank+ Param)? } |

    FixMri { @specialize<Symbol, "FIXMRI"> blank Symbol "=" blank* Param } |
    FixTab { @specialize<Symbol, "FIXTAB"> } |
    Expunge { @specialize<Symbol, "EXPUNG" | "EXPUNGE"> } |

    Decimal { @specialize<Symbol, "DECIMA" | "DECIMAL"> } |
    Octal { @specialize<Symbol, "OCTAL"> } |

    Define { @specialize<Symbol, "DEFINE"> blank Symbol (blank Symbol)* blank* MacroBody } |
    IfDef { @specialize<Symbol, "IFDEF"> blank Symbol blank* MacroBody } |
    IfNDef { @specialize<Symbol, "IFNDEF"> blank Symbol blank* MacroBody } |
    IfZero { @specialize<Symbol, "IFZERO"> blank Expression ~end !bot blank* MacroBody } |
    IfNZro { @specialize<Symbol, "IFNZRO"> blank Expression ~end !bot blank* MacroBody } |

    ZBlock { @specialize<Symbol, "ZBLOCK"> ~end (blank+ Param)? } |
    Dubl { @specialize<Symbol, "DUBL"> ((UnaryOp? Integer) | ~end (StatementEnd | Comment | blank))* } |
    Fltg { @specialize<Symbol, "FLTG"> ((UnaryOp? Float) | ~end (StatementEnd | Comment | blank))* } |
    Device { @specialize<Symbol, "DEVICE"> blank UndelimitedString } |
    FileName { @specialize<Symbol, ("FILENAM" | "FILENAME")> blank UndelimitedString } |

    EnPunch { @specialize<Symbol, "ENPUNC" | "ENPUNCH"> } |
    NoPunch { @specialize<Symbol, "NOPUNC" | "NOPUNCH"> } |
    Pause { @specialize<Symbol, "PAUSE"> } |
    XList { @specialize<Symbol, "XLIST"> } |
    Eject { @specialize<Symbol, "EJECT"> ~end (blank UndelimitedString)? } |

    Text { @specialize<Symbol, "TEXT"> blank DelimitedString }
}

MacroBody { "<" Instruction* ">"}
Param { BasicExpression }

@tokens {
    Comment { "/" ![\r\n]* }
    Symbol { $[a-zA-Z]$[a-zA-Z0-9]* }
    Integer { @digit+ }
    Float { (($[0-9]+ "." $[0-9]*) | ($[0-9]* "." $[0-9]+) | ($[0-9]+)) ($[eE] $[-+]? $[0-9]+)? }
    CLC { "." }
    ASCII { $["]![] }
    blank { $[\r\t\f ] }
    BinaryOperator { $[-+!&^%] }
    UnaryOp { $[-+] }
    EOL { "\n" }
    EOF { "$" ![]* | @eof }
}
